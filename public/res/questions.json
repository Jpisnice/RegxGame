{
    "easy": [
        {
            "question": "Write a regex to match a valid email address.",
            "solutions": [
                "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
                "^[\\w.%+-]+@[\\w.-]+\\.[a-zA-Z]{2,}$"
            ],
            "hint": "An email address contains alphanumeric characters, an '@' symbol, and a domain.",
            "test_cases": [
                "example@example.com",
                "user.name@example.co.uk",
                "12345@email.com"
            ],
            "fail_cases": [
                "plainaddress",
                "@missingusername.com",
                "username@.com"
            ]
        },
        {
            "question": "Write a regex to match a US phone number in the format (123) 456-7890.",
            "solutions": [
                "^\\(\\d{3}\\) \\d{3}-\\d{4}$",
                "^\\([0-9]{3}\\) [0-9]{3}-[0-9]{4}$"
            ],
            "hint": "The phone number should have a 3-digit area code, followed by a 3-digit prefix, and a 4-digit line number.",
            "test_cases": [
                "(123) 456-7890",
                "(987) 654-3210",
                "(111) 222-3333"
            ],
            "fail_cases": [
                "123-456-7890",
                "(123)456-7890",
                "(123) 4567890"
            ]
        },
        {
            "question": "Write a regex to match a valid IPv4 address.",
            "solutions": [
                "^([0-9]{1,3}\\.){3}[0-9]{1,3}$",
                "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
            ],
            "hint": "An IPv4 address consists of four numbers separated by dots, each between 0 and 255.",
            "test_cases": [
                "192.168.0.1",
                "255.255.255.0",
                "192.0.2.1"
            ],
            "fail_cases": [
                "256.256.256.256",
                "192.168.0",
                "123.456.78.90"
            ]
        },
        {
            "question": "Write a regex to match a date in the format YYYY-MM-DD.",
            "solutions": [
                "^\\d{4}-\\d{2}-\\d{2}$",
                "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"
            ],
            "hint": "The date format follows the pattern of four digits for the year, two digits for the month, and two digits for the day, separated by hyphens.",
            "test_cases": [
                "2024-07-15",
                "1999-12-31",
                "2023-08-15"
            ],
            "fail_cases": [
                "24-07-2024",
                "1999/12/31",
                "2023-8-15"
            ]
        },
        {
            "question": "Write a regex to match a valid hexadecimal color code.",
            "solutions": [
                "^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$",
                "^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$"
            ],
            "hint": "A hexadecimal color code can be either 3 or 6 hexadecimal digits, optionally preceded by a hash (#) symbol.",
            "test_cases": [
                "#FFA07A",
                "#FFFFFF",
                "#0F0"
            ],
            "fail_cases": [
                "FFA07A",
                "#ZZZ",
                "#12345"
            ]
        },
        {
            "question": "Write a regex to match a string that contains only digits.",
            "solutions": [
                "^\\d+$",
                "^[0-9]+$"
            ],
            "hint": "The string should only contain digits from 0 to 9.",
            "test_cases": [
                "123456",
                "007",
                "9876543210"
            ],
            "fail_cases": [
                "123a456",
                "abc",
                "12 345"
            ]
        },
        {
            "question": "Write a regex to match a string that contains only lowercase letters.",
            "solutions": [
                "^[a-z]+$",
                "^[a-z]+$"
            ],
            "hint": "The string should only contain lowercase letters from a to z.",
            "test_cases": [
                "abcdef",
                "xyz",
                "hello"
            ],
            "fail_cases": [
                "abc123",
                "ABC",
                "a_b_c"
            ]
        },
        {
            "question": "Write a regex to match a string that contains only uppercase letters.",
            "solutions": [
                "^[A-Z]+$",
                "^[A-Z]+$"
            ],
            "hint": "The string should only contain uppercase letters from A to Z.",
            "test_cases": [
                "ABCDEF",
                "XYZ",
                "HELLO"
            ],
            "fail_cases": [
                "HELLO123",
                "hello",
                "HELLO_WORLD"
            ]
        },
        {
            "question": "Write a regex to match a string that contains only alphanumeric characters.",
            "solutions": [
                "^[a-zA-Z0-9]+$",
                "^[A-Za-z0-9]+$"
            ],
            "hint": "The string should only contain letters and digits.",
            "test_cases": [
                "abc123",
                "Hello123",
                "test123"
            ],
            "fail_cases": [
                "abc-123",
                "hello!",
                "abc def"
            ]
        },
        {
            "question": "Write a regex to match a string that starts with 'Hello'.",
            "solutions": [
                "^Hello",
                "^Hello"
            ],
            "hint": "The string should start with the word 'Hello'.",
            "test_cases": [
                "Hello world",
                "Hello123",
                "HelloThere"
            ],
            "fail_cases": [
                "Hi Hello",
                "Say Hello",
                "hello"
            ]
        },
        {
            "question": "Write a regex to match a string that ends with 'world'.",
            "solutions": [
                "world$",
                "world$"
            ],
            "hint": "The string should end with the word 'world'.",
            "test_cases": [
                "Hello world",
                "Goodbye, world",
                "The world"
            ],
            "fail_cases": [
                "worlds",
                "worldly",
                "WORLD"
            ]
        },
        {
            "question": "Write a regex to match a string that contains 'abc' anywhere in the string.",
            "solutions": [
                "abc",
                "abc"
            ],
            "hint": "The string should contain the sequence 'abc'.",
            "test_cases": [
                "123abc456",
                "abcXYZ",
                "abcdef"
            ],
            "fail_cases": [
                "ab",
                "acb",
                "ab c"
            ]
        },
        {
            "question": "Write a regex to match a string that contains any whitespace character.",
            "solutions": [
                "\\s",
                "\\s"
            ],
            "hint": "The string should contain at least one whitespace character.",
            "test_cases": [
                "Hello world",
                "Tabs\tand spaces",
                "Line\nbreak"
            ],
            "fail_cases": [
                "NoSpacesHere",
                "TabsAndSpaces",
                "LineBreak"
            ]
        },
        {
            "question": "Write a regex to match a string that contains no whitespace characters.",
            "solutions": [
                "^\\S+$",
                "^\\S+$"
            ],
            "hint": "The string should not contain any whitespace characters.",
            "test_cases": [
                "HelloWorld",
                "Nospacestoo",
                "NoSpacesHere"
            ],
            "fail_cases": [
                "Hello World",
                "No spaces",
                "Space here"
            ]
        },
        {
            "question": "Write a regex to match a string that is a valid URL.",
            "solutions": [
                "^(https?|ftp)://[^\\s/$.?#].[^\\s]*$",
                "^(https?|ftp)://[^\\s/$.?#][^\\s]*$"
            ],
            "hint": "A valid URL starts with 'http', 'https', or 'ftp', followed by '://', and a valid domain name.",
            "test_cases": [
                "https://example.com",
                "http://subdomain.example.org",
                "ftp://ftp.example.net"
            ],
            "fail_cases": [
                "htp://example.com",
                "http:/example.com",
                "http:// example .com"
            ]
        }
    ],
    "medium": [
        {
            "question": "Write a regex to match a password that must contain at least one lowercase letter, one uppercase letter, one digit, and one special character, and be at least 8 characters long.",
            "solutions": [
                "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$",
                "^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])[a-zA-Z0-9!@#\\$%\\^&\\*]{8,}$"
            ],
            "hint": "Ensure the regex includes positive lookaheads for each required character type.",
            "test_cases": [
                "Password123!",
                "SecurePass123#",
                "ComplexP@ssw0rd"
            ],
            "fail_cases": [
                "password",
                "PASSWORD123",
                "Password123"
            ]
        },
        {
            "question": "Write a regex to match a string that is a valid floating-point number.",
            "solutions": [
                "^[+-]?(\\d+\\.?\\d*|\\.\\d+)$",
                "^[+-]?\\d*\\.\\d+$"
            ],
            "hint": "A floating-point number can have an optional sign, digits before and after the decimal point.",
            "test_cases": [
                "3.14159",
                "-0.001",
                "123."
            ],
            "fail_cases": [
                "123",
                ".",
                "123a"
            ]
        },
        {
            "question": "Write a regex to match a valid MAC address.",
            "solutions": [
                "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$",
                "^[0-9A-Fa-f]{2}(:[0-9A-Fa-f]{2}){5}$"
            ],
            "hint": "A MAC address consists of six groups of two hexadecimal digits, separated by colons or hyphens.",
            "test_cases": [
                "00:1A:2B:3C:4D:5E",
                "11-22-33-44-55-66",
                "FF:FF:FF:FF:FF:FF"
            ],
            "fail_cases": [
                "00:1A:2B:3C:4D",
                "11-22-33-44-55",
                "FF:FF:FF:FF:FF:FF:FF"
            ]
        },
        {
            "question": "Write a regex to match a valid HTML hex color code.",
            "solutions": [
                "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
                "^#([A-Fa-f0-9]{3}){1,2}$"
            ],
            "hint": "A valid hex color code starts with a '#' followed by either three or six hexadecimal digits.",
            "test_cases": [
                "#FFA07A",
                "#00FF00",
                "#000"
            ],
            "fail_cases": [
                "#1234",
                "FFA07A",
                "#GHIJKL"
            ]
        },
        {
            "question": "Write a regex to match a string that is a valid URL with a query string.",
            "solutions": [
                "^(https?|ftp)://[^\\s/$.?#].[^\\s]*\\?[^\\s]*$",
                "^(https?|ftp)://[^\\s/$.?#][^\\s]*\\?[^\\s]*$"
            ],
            "hint": "A valid URL starts with 'http', 'https', or 'ftp', followed by '://', and a valid domain name with a query string.",
            "test_cases": [
                "https://example.com?query=test",
                "http://subdomain.example.org?param=value",
                "ftp://ftp.example.net?name=example"
            ],
            "fail_cases": [
                "https://example.com",
                "http://subdomain.example.org",
                "ftp://ftp.example.net"
            ]
        },
        {
            "question": "Write a regex to match a string that is a valid credit card number.",
            "solutions": [
                "^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|6(?:011|5[0-9]{2})[0-9]{12}|(?:2131|1800|35\\d{3})\\d{11})$",
                "^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|6(?:011|5[0-9]{2})[0-9]{12}|(?:2131|1800|35\\d{3})\\d{11})$"
            ],
            "hint": "A valid credit card number follows the rules for major card brands like Visa, MasterCard, American Express, etc.",
            "test_cases": [
                "4111111111111111",
                "5500000000000004",
                "340000000000009"
            ],
            "fail_cases": [
                "1234567812345678",
                "0000000000000000",
                "411111111111111"
            ]
        },
        {
            "question": "Write a regex to match a string that is a valid US Social Security Number (SSN).",
            "solutions": [
                "^(?!000|666)[0-9]{3}-(?!00)[0-9]{2}-(?!0000)[0-9]{4}$",
                "^(?!000|666)[0-9]{3}-(?!00)[0-9]{2}-(?!0000)[0-9]{4}$"
            ],
            "hint": "A valid SSN follows the pattern NNN-NN-NNNN, where N is a digit.",
            "test_cases": [
                "123-45-6789",
                "001-01-0001",
                "987-65-4321"
            ],
            "fail_cases": [
                "123-45-678",
                "123-456-789",
                "000-12-3456"
            ]
        },
        {
            "question": "Write a regex to match a string that is a valid time in 24-hour format (HH:MM).",
            "solutions": [
                "^([01]?[0-9]|2[0-3]):[0-5][0-9]$",
                "^([01]\\d|2[0-3]):([0-5]\\d)$"
            ],
            "hint": "A valid time in 24-hour format ranges from 00:00 to 23:59.",
            "test_cases": [
                "00:00",
                "23:59",
                "14:30"
            ],
            "fail_cases": [
                "24:00",
                "12:60",
                "1:30"
            ]
        },
        {
            "question": "Write a regex to match a string that is a valid domain name.",
            "solutions": [
                "^(?!-)[A-Za-z0-9-]{1,63}(?<!-)$",
                "^(?!-)[A-Za-z0-9-]{1,63}(?<!-)$"
            ],
            "hint": "A valid domain name contains alphanumeric characters and hyphens, and it cannot start or end with a hyphen.",
            "test_cases": [
                "example.com",
                "sub-domain.example.org",
                "my-site123.net"
            ],
            "fail_cases": [
                "-example.com",
                "example-.com",
                "example..com"
            ]
        }
    ],
    "hard": [
        {
            "question": "Write a regex to match a valid CSS identifier.",
            "solutions": [
                "^[_a-zA-Z][_a-zA-Z0-9-]*$",
                "^[a-zA-Z]+[_a-zA-Z0-9-]*$"
            ],
            "hint": "A valid CSS identifier starts with a letter, underscore, or hyphen, followed by letters, digits, underscores, or hyphens.",
            "test_cases": [
                "_valid-identifier",
                "my_id123",
                "css-class"
            ],
            "fail_cases": [
                "123identifier",
                "-invalid",
                "@invalid"
            ]
        },
        {
            "question": "Write a regex to match a valid Unix file path.",
            "solutions": [
                "^(/[^/]+)+$",
                "^(/[\\w-]+)+$"
            ],
            "hint": "A valid Unix file path starts with a forward slash '/' and can include alphanumeric characters, hyphens, and underscores.",
            "test_cases": [
                "/home/user/file.txt",
                "/var/www/index.html",
                "/usr/bin/"
            ],
            "fail_cases": [
                "home/user/file.txt",
                "//usr//bin//",
                "/usr/bin/ "
            ]
        },
        {
            "question": "Write a regex to match a valid JavaScript variable name.",
            "solutions": [
                "^[$A-Z_a-z][0-9A-Z_a-z]*$",
                "^[_$a-zA-Z][_$a-zA-Z0-9]*$"
            ],
            "hint": "A valid JavaScript variable name starts with a letter, underscore, or dollar sign, followed by letters, digits, underscores, or dollar signs.",
            "test_cases": [
                "_validVar",
                "$myVar123",
                "varName"
            ],
            "fail_cases": [
                "123var",
                "-invalidVar",
                "var-name"
            ]
        },
        {
            "question": "Write a regex to match a valid ISBN-10 number.",
            "solutions": [
                "^(?:\\d{9}X|\\d{10})$",
                "^\\d{9}[\\dX]$"
            ],
            "hint": "A valid ISBN-10 number consists of nine digits followed by either another digit or 'X'.",
            "test_cases": [
                "0471958697",
                "0306406152",
                "123456789X"
            ],
            "fail_cases": [
                "123456789",
                "X123456789",
                "1234567890X"
            ]
        },
        {
            "question": "Write a regex to match a string that is a valid Markdown link.",
            "solutions": [
                "^\\[([^\\[]+)\\]\\(([^\\)]+)\\)$",
                "^\\[.*\\]\\(.*\\)$"
            ],
            "hint": "A valid Markdown link follows the pattern [text](URL).",
            "test_cases": [
                "[OpenAI](https://openai.com)",
                "[GitHub](https://github.com)",
                "[Google](https://www.google.com)"
            ],
            "fail_cases": [
                "[OpenAI](openai.com)",
                "OpenAI(https://openai.com)",
                "[OpenAI][https://openai.com]"
            ]
        },
        {
            "question": "Write a regex to match a string that is a valid JSON key.",
            "solutions": [
                "^\"([^\"]+)\"$",
                "^\"[^\"]+\"$"
            ],
            "hint": "A valid JSON key is a string enclosed in double quotes.",
            "test_cases": [
                "\"name\"",
                "\"key_123\"",
                "\"validKey\""
            ],
            "fail_cases": [
                "name",
                "'key_123'",
                "\"invalid key\""
            ]
        },
        {
            "question": "Write a regex to match a string that is a valid HTML tag.",
            "solutions": [
                "^<([a-z]+)([^<]+)*(?:>(.*)<\\/\\1>|\\s+\\/>)$",
                "^<\\w+(\\s+\\w+(\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^'\">\\s]+))?)*\\s*\\/?>$"
            ],
            "hint": "A valid HTML tag starts with '<', followed by the tag name and optional attributes, and ends with '>' or '/>'.",
            "test_cases": [
                "<div>",
                "<a href=\"https://example.com\">",
                "<img src=\"image.jpg\" />"
            ],
            "fail_cases": [
                "< div>",
                "<a href=https://example.com>",
                "<img src=image.jpg>"
            ]
        },
        {
            "question": "Write a regex to match a string that is a valid CSS property.",
            "solutions": [
                "^\\s*[a-zA-Z-]+\\s*:\\s*[^;]+\\s*;$",
                "^[\\w-]+\\s*:\\s*[^;]+;$"
            ],
            "hint": "A valid CSS property follows the pattern property: value;.",
            "test_cases": [
                "color: blue;",
                "background-color: #FFF;",
                "font-size: 14px;"
            ],
            "fail_cases": [
                "color blue;",
                "background-color:;",
                "font-size 14px;"
            ]
        },
        {
            "question": "Write a regex to match a string that is a valid HTML attribute.",
            "solutions": [
                "^[a-zA-Z-]+=\"[^\"]*\"$",
                "^[\\w-]+=\"[^\"]*\"$"
            ],
            "hint": "A valid HTML attribute follows the pattern attribute=\"value\".",
            "test_cases": [
                "href=\"https://example.com\"",
                "alt=\"Image description\"",
                "id=\"main-content\""
            ],
            "fail_cases": [
                "href=https://example.com",
                "alt='Image description'",
                "id=main-content"
            ]
        },
        {
            "question": "Write a regex to match a string that is a valid XML element.",
            "solutions": [
                "^<([a-zA-Z_][\\w\\-\\.]*)(\\s+[a-zA-Z_:][\\w\\-\\.]*\\s*=\\s*(\"[^\"]*\"|'[^']*'|[^'\">\\s]+))*\\s*(\\/?)>$",
                "^<\\w+>(.|\n)*?<\\/\\w+>$"
            ],
            "hint": "A valid XML element includes an opening tag, optional attributes, and a closing tag.",
            "test_cases": [
                "<note>",
                "<to>User</to>",
                "<message sender=\"user1\" recipient=\"user2\">Hello</message>"
            ],
            "fail_cases": [
                "<note>",
                "<to>User",
                "<message sender=user1 recipient=user2>Hello</message>"
            ]
        }
    ]
}
